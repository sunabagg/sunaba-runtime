-- Generated by Haxe 4.3.6
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    local res = {}
    local idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
__bolt_Behavior = _hx_e()
local DeltaTimePrinter = _hx_e()
local HelloOne = _hx_e()
local HelloTwo = _hx_e()
local HelloWorld = _hx_e()
__bolt_App = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local Type = _hx_e()
__bolt_GameObject = _hx_e()
__bolt_Scene = _hx_e()
__bolt_SceneType = _hx_e()
__bolt_godot__Basis_Basis_Impl_ = _hx_e()
__bolt_godot__Quaternion_Quaternion_Impl_ = _hx_e()
__bolt_godot__Vector2_Vector2_Impl_ = _hx_e()
__bolt_godot__Vector2i_Vector2i_Impl_ = _hx_e()
__bolt_godot__Vector3_Vector3_Impl_ = _hx_e()
__bolt_godot__Vector3i_Vector3i_Impl_ = _hx_e()
__bolt_godot__Vector4_Vector4_Impl_ = _hx_e()
__bolt_godot__Vector4i_Vector4i_Impl_ = _hx_e()
__haxe_Exception = _hx_e()
__haxe_Log = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_exceptions_PosException = _hx_e()
__haxe_exceptions_NotImplementedException = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_Thread = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = "Array"
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do _hx_do_first_1 = false;
    
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do _hx_do_first_1 = false;
    
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do _hx_do_first_1 = false;
    
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do _hx_do_first_2 = false;
      
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do _hx_do_first_1 = false;
    
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do _hx_do_first_2 = false;
        
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do _hx_do_first_1 = false;
    
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do _hx_do_first_1 = false;
        
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

__bolt_Behavior.new = function() 
  local self = _hx_new(__bolt_Behavior.prototype)
  __bolt_Behavior.super(self)
  return self
end
__bolt_Behavior.super = function(self) 
end
__bolt_Behavior.__name__ = "bolt.Behavior"
__bolt_Behavior.prototype = _hx_e();
__bolt_Behavior.prototype.awake = function(self) 
end
__bolt_Behavior.prototype.start = function(self) 
end
__bolt_Behavior.prototype.update = function(self,deltatime) 
end
__bolt_Behavior.prototype.physicsUpdate = function(self,deltatime) 
end
__bolt_Behavior.prototype.input = function(self,event) 
end
__bolt_Behavior.prototype.unhandledInput = function(self,event) 
end
__bolt_Behavior.prototype.shortcutInput = function(self,event) 
end
__bolt_Behavior.prototype.unhandledKeyInput = function(self,event) 
end
__bolt_Behavior.prototype["end"] = function(self) 
end
__bolt_Behavior.prototype.getComponent = function(self,type) 
  local comp = self.gameObject:getComponent(type);
  do return comp end
end

__bolt_Behavior.prototype.__class__ =  __bolt_Behavior

DeltaTimePrinter.new = function() 
  local self = _hx_new(DeltaTimePrinter.prototype)
  DeltaTimePrinter.super(self)
  return self
end
DeltaTimePrinter.super = function(self) 
  __bolt_Behavior.super(self);
end
DeltaTimePrinter.__name__ = "DeltaTimePrinter"
DeltaTimePrinter.prototype = _hx_e();
DeltaTimePrinter.prototype.update = function(self,deltaTime) 
  __haxe_Log.trace(deltaTime, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="DeltaTimePrinter.hx",lineNumber=5,className="DeltaTimePrinter",methodName="update"}));
end

DeltaTimePrinter.prototype.__class__ =  DeltaTimePrinter
DeltaTimePrinter.__super__ = __bolt_Behavior
setmetatable(DeltaTimePrinter.prototype,{__index=__bolt_Behavior.prototype})

HelloOne.new = function() 
  local self = _hx_new(HelloOne.prototype)
  HelloOne.super(self)
  return self
end
HelloOne.super = function(self) 
  __bolt_Behavior.super(self);
end
HelloOne.__name__ = "HelloOne"
HelloOne.prototype = _hx_e();
HelloOne.prototype.sayHello = function(self,name) 
  local helloStr = Std.string(Std.string("Hello, ") .. Std.string(name)) .. Std.string("!");
  _G.print(Std.string(helloStr));
end

HelloOne.prototype.__class__ =  HelloOne
HelloOne.__super__ = __bolt_Behavior
setmetatable(HelloOne.prototype,{__index=__bolt_Behavior.prototype})

HelloTwo.new = function() 
  local self = _hx_new(HelloTwo.prototype)
  HelloTwo.super(self)
  return self
end
HelloTwo.super = function(self) 
  __bolt_Behavior.super(self);
end
HelloTwo.__name__ = "HelloTwo"
HelloTwo.prototype = _hx_e();
HelloTwo.prototype.start = function(self) 
  local helloOne = self:getComponent(HelloOne);
  helloOne:sayHello("mintkat");
end

HelloTwo.prototype.__class__ =  HelloTwo
HelloTwo.__super__ = __bolt_Behavior
setmetatable(HelloTwo.prototype,{__index=__bolt_Behavior.prototype})

HelloWorld.new = function() 
  local self = _hx_new(HelloWorld.prototype)
  HelloWorld.super(self)
  return self
end
HelloWorld.super = function(self) 
  __bolt_Behavior.super(self);
end
HelloWorld.__name__ = "HelloWorld"
HelloWorld.prototype = _hx_e();
HelloWorld.prototype.start = function(self) 
  _G.print("Hello World!");
end

HelloWorld.prototype.__class__ =  HelloWorld
HelloWorld.__super__ = __bolt_Behavior
setmetatable(HelloWorld.prototype,{__index=__bolt_Behavior.prototype})

__bolt_App.new = function() 
  local self = _hx_new(__bolt_App.prototype)
  __bolt_App.super(self)
  return self
end
__bolt_App.super = function(self) 
  _G.update = function(deltaTime) self:update(deltaTime) end;
  _G.physicsUpdate = function(deltaTime) self:physicsUpdate(deltaTime) end;
  _G.input = function(event) self:input(event) end;
  _G.unhandledInput = function(event) self:unhandledInput(event) end;
  _G.shortcutInput = function(event) self:shortcutInput(event) end;
  _G.unhandledKeyInput = function(event) self:unhandledKeyInput(event) end;
  _G.stop = function() self:stop() end;
  self:init();
end
__bolt_App.__name__ = "bolt.App"
__bolt_App.prototype = _hx_e();
__bolt_App.prototype.get_rootNode = function(self) 
  do return _G.rootNode end
end
__bolt_App.prototype.get_ioInterface = function(self) 
  do return _G.ioInterface end
end
__bolt_App.prototype.init = function(self) 
end
__bolt_App.prototype.update = function(self,deltaTime) 
end
__bolt_App.prototype.physicsUpdate = function(self,deltaTime) 
end
__bolt_App.prototype.input = function(self,event) 
end
__bolt_App.prototype.unhandledInput = function(self,event) 
end
__bolt_App.prototype.shortcutInput = function(self,event) 
end
__bolt_App.prototype.unhandledKeyInput = function(self,event) 
end
__bolt_App.prototype.stop = function(self) 
end

__bolt_App.prototype.__class__ =  __bolt_App

Main.new = function() 
  local self = _hx_new(Main.prototype)
  Main.super(self)
  return self
end
Main.super = function(self) 
  __bolt_App.super(self);
end
Main.__name__ = "Main"
Main.main = function() 
  Main.new();
end
Main.prototype = _hx_e();
Main.prototype.init = function(self) 
  self.canvasScene = __bolt_Scene.new(__bolt_SceneType.Canvas);
  local gameobject1 = __bolt_GameObject.new();
  self.canvasScene:addObject(gameobject1);
  local gameObject1Child1 = __bolt_GameObject.new();
  gameobject1:addChild(gameObject1Child1);
  local gameObject1Child2 = __bolt_GameObject.new();
  gameobject1:addChild(gameObject1Child2);
  gameObject1Child2:addComponent(DeltaTimePrinter);
  gameobject1:addComponent(HelloWorld);
  local subChild1 = __bolt_GameObject.new();
  gameObject1Child1:addChild(subChild1);
  local gameobject2 = __bolt_GameObject.new();
  self.canvasScene:addObject(gameobject2);
  gameobject2:addComponent(HelloOne);
  gameobject2:addComponent(HelloTwo);
  local gameObject2Child1 = __bolt_GameObject.new();
  gameobject2:addChild(gameObject2Child1);
  local gameobject3 = __bolt_GameObject.new();
  self.canvasScene:addObject(gameobject3);
  self.canvasScene:printTree();
  self.canvasScene:start();
end
Main.prototype.update = function(self,deltaTime) 
  self.canvasScene:update(deltaTime);
end

Main.prototype.__class__ =  Main
Main.__super__ = __bolt_App
setmetatable(Main.prototype,{__index=__bolt_App.prototype})

Math.new = {}
Math.__name__ = "Math"
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.__name__ = "Reflect"
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = "String"
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do _hx_do_first_1 = false;
    
    local p = String.prototype.indexOf(self, str, ret + 1);
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do _hx_do_first_1 = false;
    
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = "Std"
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

Type.new = {}
Type.__name__ = "Type"
Type.createInstance = function(cl,args) 
  do return cl.new(_hx_table.unpack(args, 0)) end;
end

__bolt_GameObject.new = function() 
  local self = _hx_new(__bolt_GameObject.prototype)
  __bolt_GameObject.super(self)
  return self
end
__bolt_GameObject.super = function(self) 
  self.children = Array.new();
  self.components = Array.new();
  self.componentTypes = Array.new();
  self.parentObject = nil;
  self.scene = nil;
  self.name = "GameObject";
end
__bolt_GameObject.__name__ = "bolt.GameObject"
__bolt_GameObject.prototype = _hx_e();
__bolt_GameObject.prototype.addChild = function(self,child) 
  self.children:push(child);
  child.parentObject = self;
  child.scene = self.scene;
  if (child.node ~= nil) then 
    self.node:addChild(child.node);
  end;
  local _g = 0;
  local _g1 = self.children.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local c = self.children[i];
    if (c ~= child) then 
      if (c.name == child.name) then 
        child.name = Std.string(Std.string("GameObject (") .. Std.string(Std.string(i))) .. Std.string(")");
      end;
    end;
  end;
end
__bolt_GameObject.prototype.removeChild = function(self,child) 
  local index = self.children:indexOf(child);
  if (index ~= -1) then 
    self.children:splice(index, 1);
  end;
  child.parentObject = nil;
  child.scene = nil;
  if (child.node ~= nil) then 
    self.node:removeChild(child.node);
  end;
end
__bolt_GameObject.prototype.find = function(self,path) 
  local pathArray = String.prototype.split(path, "/");
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    if (child.name == pathArray[0]) then 
      if (pathArray.length == 1) then 
        do return child end;
      else
        local subChild = child:find(pathArray:slice(1):join("/"));
        if (subChild ~= nil) then 
          do return subChild end;
        end;
      end;
    end;
  end;
  do return nil end
end
__bolt_GameObject.prototype.hasChild = function(self,child) 
  do return self.children:indexOf(child) ~= -1 end
end
__bolt_GameObject.prototype.hasChildWithName = function(self,name) 
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    if (child.name == name) then 
      do return true end;
    end;
  end;
  do return false end
end
__bolt_GameObject.prototype.addComponent = function(self,componentType) 
  local component = Type.createInstance(componentType, _hx_tab_array({}, 0));
  self.components:push(component);
  if (__lua_Boot.__instanceof(component, __bolt_Behavior)) then 
    self.componentTypes:push(componentType);
    component.gameObject = self;
    component:awake();
  else
    self.components:splice(self.components:indexOf(component), 1);
    _G.error(__haxe_Exception.thrown("Component must be a Behavior"),0);
  end;
end
__bolt_GameObject.prototype.getComponent = function(self,componentType) 
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    if (__lua_Boot.__instanceof(component, componentType)) then 
      local b = component;
      do return b end;
    end;
  end;
  do return nil end
end
__bolt_GameObject.prototype.removeComponent = function(self,componentType) 
  local _g = 0;
  local _g1 = self.components.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (__lua_Boot.__instanceof(self.components[i], componentType)) then 
      _hx_apply_self(self.components[i],"end");
      self.components:splice(i, 1);
      do return end;
    end;
  end;
end
__bolt_GameObject.prototype.start = function(self) 
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    component:start();
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    child:start();
  end;
end
__bolt_GameObject.prototype.update = function(self,deltatime) 
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    component:update(deltatime);
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    child:update(deltatime);
  end;
end
__bolt_GameObject.prototype.physicsUpdate = function(self,deltatime) 
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    component:physicsUpdate(deltatime);
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    child:physicsUpdate(deltatime);
  end;
end
__bolt_GameObject.prototype.input = function(self,event) 
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    component:input(event);
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    child:input(event);
  end;
end
__bolt_GameObject.prototype.unhandledInput = function(self,event) 
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    component:unhandledInput(event);
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    child:unhandledInput(event);
  end;
end
__bolt_GameObject.prototype.shortcutInput = function(self,event) 
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    component:shortcutInput(event);
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    child:shortcutInput(event);
  end;
end
__bolt_GameObject.prototype.unhandledKeyInput = function(self,event) 
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    component:unhandledKeyInput(event);
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    child:unhandledKeyInput(event);
  end;
end
__bolt_GameObject.prototype.printTree = function(self,whiteSpace) 
  if (whiteSpace == nil) then 
    whiteSpace = "  ";
  end;
  _G.print(Std.string(Std.string(whiteSpace) .. Std.string(self.name)));
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    local type = self.componentTypes[self.components:indexOf(component)];
    local typeName = type.__name__;
    _G.print(Std.string(Std.string(Std.string(whiteSpace) .. Std.string("  -> ")) .. Std.string(typeName)));
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    child:printTree(Std.string(whiteSpace) .. Std.string("  "));
  end;
end
__bolt_GameObject.prototype["end"] = function(self) 
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    _hx_apply_self(component,"end");
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    _hx_apply_self(child,"end");
  end;
end
__bolt_GameObject.prototype.getParent = function(self) 
  if (self.parentObject ~= nil) then 
    do return self.parentObject end;
  else
    do return self.scene end;
  end;
end
__bolt_GameObject.prototype.destroy = function(self) 
  _hx_apply_self(self,"end");
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local child = _g1[_g];
    _g = _g + 1;
    child:destroy();
  end;
  local _g = 0;
  local _g1 = self.components;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local component = _g1[_g];
    _g = _g + 1;
    _hx_apply_self(component,"end");
  end;
  if (self.node ~= nil) then 
    self.node:queueFree();
  end;
end

__bolt_GameObject.prototype.__class__ =  __bolt_GameObject

__bolt_Scene.new = function(sceneType) 
  local self = _hx_new(__bolt_Scene.prototype)
  __bolt_Scene.super(self,sceneType)
  return self
end
__bolt_Scene.super = function(self,sceneType) 
  if (sceneType == __bolt_SceneType.Spatial) then 
    self.node = godot.Node3D.__new();
  else
    if (sceneType == __bolt_SceneType.Canvas) then 
      self.node = godot.Node2D.__new();
    end;
  end;
  self.objects = Array.new();
end
__bolt_Scene.__name__ = "bolt.Scene"
__bolt_Scene.prototype = _hx_e();
__bolt_Scene.prototype.addObject = function(self,gameObject) 
  self.objects:push(gameObject);
  gameObject.scene = self;
  if (gameObject.node ~= nil) then 
    self.node:addChild(gameObject.node);
  end;
  local _g = 0;
  local _g1 = self.objects.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local obj = self.objects[i];
    if (obj ~= gameObject) then 
      if (obj.name == gameObject.name) then 
        gameObject.name = Std.string(Std.string("GameObject (") .. Std.string(Std.string(i))) .. Std.string(")");
      end;
    end;
  end;
end
__bolt_Scene.prototype.removeObject = function(self,gameObject) 
  local index = self.objects:indexOf(gameObject);
  if (index ~= -1) then 
    self.objects:splice(index, 1);
  end;
  gameObject.scene = nil;
  if (gameObject.node ~= nil) then 
    self.node:removeChild(gameObject.node);
  end;
end
__bolt_Scene.prototype.find = function(self,path) 
  local pathArray = String.prototype.split(path, "/");
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    if (obj.name == pathArray[0]) then 
      if (pathArray.length == 1) then 
        do return obj end;
      else
        local child = obj:find(pathArray:slice(1):join("/"));
        if (child ~= nil) then 
          do return child end;
        end;
      end;
    end;
  end;
  do return nil end
end
__bolt_Scene.prototype.start = function(self) 
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    obj:start();
  end;
end
__bolt_Scene.prototype.update = function(self,deltatime) 
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    obj:update(deltatime);
  end;
end
__bolt_Scene.prototype.physicsUpdate = function(self,deltatime) 
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    obj:physicsUpdate(deltatime);
  end;
end
__bolt_Scene.prototype.input = function(self,event) 
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    obj:input(event);
  end;
end
__bolt_Scene.prototype.unhandledInput = function(self,event) 
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    obj:unhandledInput(event);
  end;
end
__bolt_Scene.prototype.shortcutInput = function(self,event) 
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    obj:shortcutInput(event);
  end;
end
__bolt_Scene.prototype.unhandledKeyInput = function(self,event) 
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    obj:unhandledKeyInput(event);
  end;
end
__bolt_Scene.prototype["end"] = function(self) 
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    _hx_apply_self(obj,"end");
  end;
end
__bolt_Scene.prototype.destroy = function(self) 
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    obj:destroy();
    self.objects:splice(self.objects:indexOf(obj), 1);
  end;
end
__bolt_Scene.prototype.printTree = function(self) 
  _G.print("Scene");
  local _g = 0;
  local _g1 = self.objects;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local obj = _g1[_g];
    _g = _g + 1;
    obj:printTree();
  end;
end

__bolt_Scene.prototype.__class__ =  __bolt_Scene
_hxClasses["bolt.SceneType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Spatial","Canvas"},2)}
__bolt_SceneType = _hxClasses["bolt.SceneType"];
__bolt_SceneType.Spatial = _hx_tab_array({[0]="Spatial",0,__enum__ = __bolt_SceneType},2)

__bolt_SceneType.Canvas = _hx_tab_array({[0]="Canvas",1,__enum__ = __bolt_SceneType},2)


__bolt_godot__Basis_Basis_Impl_.new = {}
__bolt_godot__Basis_Basis_Impl_.__name__ = "bolt.godot._Basis.Basis_Impl_"
__bolt_godot__Basis_Basis_Impl_._new = function(x,y,z) 
  do return godot.Basis.__new(x, y, z) end;
end
__bolt_godot__Basis_Basis_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__bolt_godot__Basis_Basis_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__bolt_godot__Basis_Basis_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__bolt_godot__Basis_Basis_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == "x") then 
          this1.x = value;
        else
          if (n == "y") then 
            this1.y = value;
          else
            if (n == "z") then 
              this1.z = value;
            else
              _G.error(__haxe_Exception.thrown("Invalid index"),0);
            end;
          end;
        end;
      end;
    end;
  end;
end
__bolt_godot__Basis_Basis_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__bolt_godot__Basis_Basis_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__bolt_godot__Basis_Basis_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__bolt_godot__Basis_Basis_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__bolt_godot__Basis_Basis_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__bolt_godot__Basis_Basis_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__bolt_godot__Basis_Basis_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__bolt_godot__Basis_Basis_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__bolt_godot__Basis_Basis_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__bolt_godot__Basis_Basis_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__bolt_godot__Basis_Basis_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__bolt_godot__Basis_Basis_Impl_.toString = function(v) 
  do return v.toString() end;
end

__bolt_godot__Quaternion_Quaternion_Impl_.new = {}
__bolt_godot__Quaternion_Quaternion_Impl_.__name__ = "bolt.godot._Quaternion.Quaternion_Impl_"
__bolt_godot__Quaternion_Quaternion_Impl_._new = function(x,y,z,w) 
  if (w == nil) then 
    w = 0;
  end;
  if (z == nil) then 
    z = 0;
  end;
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return godot.Quaternion.__new(x, y, z, w) end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  if (n == "w") then 
    do return this1.w end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__bolt_godot__Quaternion_Quaternion_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == "x") then 
          this1.x = value;
        else
          if (n == "y") then 
            this1.y = value;
          else
            if (n == "z") then 
              this1.z = value;
            else
              if (n == "w") then 
                this1.w = value;
              else
                _G.error(__haxe_Exception.thrown("Invalid index"),0);
              end;
            end;
          end;
        end;
      end;
    end;
  end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__bolt_godot__Quaternion_Quaternion_Impl_.toString = function(v) 
  do return v.toString() end;
end

__bolt_godot__Vector2_Vector2_Impl_.new = {}
__bolt_godot__Vector2_Vector2_Impl_.__name__ = "bolt.godot._Vector2.Vector2_Impl_"
__bolt_godot__Vector2_Vector2_Impl_._new = function(x,y) 
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return godot.Vector2.__new(x, y) end;
end
__bolt_godot__Vector2_Vector2_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__bolt_godot__Vector2_Vector2_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__bolt_godot__Vector2_Vector2_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__bolt_godot__Vector2_Vector2_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == "x") then 
        this1.x = value;
      else
        if (n == "y") then 
          this1.y = value;
        else
          _G.error(__haxe_Exception.thrown("Invalid index"),0);
        end;
      end;
    end;
  end;
end
__bolt_godot__Vector2_Vector2_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__bolt_godot__Vector2_Vector2_Impl_.toString = function(v) 
  do return v.toString() end;
end

__bolt_godot__Vector2i_Vector2i_Impl_.new = {}
__bolt_godot__Vector2i_Vector2i_Impl_.__name__ = "bolt.godot._Vector2i.Vector2i_Impl_"
__bolt_godot__Vector2i_Vector2i_Impl_._new = function(x,y) 
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return godot.Vector2I.__new(x, y) end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    if (name == "native") then 
      do return this1 end;
    else
      if (name == "x") then 
        do return this1.x end;
      else
        if (name == "y") then 
          do return this1.y end;
        else
          local o = this1;
          if ((function() 
            local _hx_1
            if ((_G.type(o) == "function") and not ((function() 
              local _hx_2
              if (_G.type(o) ~= "table") then 
              _hx_2 = false; else 
              _hx_2 = o.__name__; end
              return _hx_2
            end )() or (function() 
              local _hx_3
              if (_G.type(o) ~= "table") then 
              _hx_3 = false; else 
              _hx_3 = o.__ename__; end
              return _hx_3
            end )())) then 
            _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
            _hx_1 = true; elseif (o.__fields__ ~= nil) then 
            _hx_1 = o.__fields__[name] ~= nil; else 
            _hx_1 = o[name] ~= nil; end
            return _hx_1
          end )()) then 
            do return Reflect.field(this1, name) end;
          else
            _G.error(__haxe_Exception.thrown("Invalid field"),0);
          end;
        end;
      end;
    end;
  end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__bolt_godot__Vector2i_Vector2i_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == "x") then 
        this1.x = value;
      else
        if (n == "y") then 
          this1.y = value;
        else
          _G.error(__haxe_Exception.thrown("Invalid index"),0);
        end;
      end;
    end;
  end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__bolt_godot__Vector2i_Vector2i_Impl_.toString = function(v) 
  do return v.toString() end;
end

__bolt_godot__Vector3_Vector3_Impl_.new = {}
__bolt_godot__Vector3_Vector3_Impl_.__name__ = "bolt.godot._Vector3.Vector3_Impl_"
__bolt_godot__Vector3_Vector3_Impl_._new = function(x,y,z) 
  if (z == nil) then 
    z = 0;
  end;
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return godot.Vector3.__new(x, y, z) end;
end
__bolt_godot__Vector3_Vector3_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    local o = this1;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[name] ~= nil; else 
      _hx_1 = o[name] ~= nil; end
      return _hx_1
    end )()) then 
      do return Reflect.field(this1, name) end;
    else
      _G.error(__haxe_Exception.thrown("Invalid field"),0);
    end;
  end;
end
__bolt_godot__Vector3_Vector3_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__bolt_godot__Vector3_Vector3_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__bolt_godot__Vector3_Vector3_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == "x") then 
          this1.x = value;
        else
          if (n == "y") then 
            this1.y = value;
          else
            if (n == "z") then 
              this1.z = value;
            else
              _G.error(__haxe_Exception.thrown("Invalid index"),0);
            end;
          end;
        end;
      end;
    end;
  end;
end
__bolt_godot__Vector3_Vector3_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__bolt_godot__Vector3_Vector3_Impl_.toString = function(v) 
  do return v.toString() end;
end

__bolt_godot__Vector3i_Vector3i_Impl_.new = {}
__bolt_godot__Vector3i_Vector3i_Impl_.__name__ = "bolt.godot._Vector3i.Vector3i_Impl_"
__bolt_godot__Vector3i_Vector3i_Impl_._new = function(x,y,z) 
  if (z == nil) then 
    z = 0;
  end;
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return godot.Vector3I.__new(x, y, z) end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    if (name == "native") then 
      do return this1 end;
    else
      if (name == "x") then 
        do return this1.x end;
      else
        if (name == "y") then 
          do return this1.y end;
        else
          if (name == "z") then 
            do return this1.z end;
          else
            local o = this1;
            if ((function() 
              local _hx_1
              if ((_G.type(o) == "function") and not ((function() 
                local _hx_2
                if (_G.type(o) ~= "table") then 
                _hx_2 = false; else 
                _hx_2 = o.__name__; end
                return _hx_2
              end )() or (function() 
                local _hx_3
                if (_G.type(o) ~= "table") then 
                _hx_3 = false; else 
                _hx_3 = o.__ename__; end
                return _hx_3
              end )())) then 
              _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
              _hx_1 = true; elseif (o.__fields__ ~= nil) then 
              _hx_1 = o.__fields__[name] ~= nil; else 
              _hx_1 = o[name] ~= nil; end
              return _hx_1
            end )()) then 
              do return Reflect.field(this1, name) end;
            else
              _G.error(__haxe_Exception.thrown("Invalid field"),0);
            end;
          end;
        end;
      end;
    end;
  end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__bolt_godot__Vector3i_Vector3i_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == "x") then 
          this1.x = value;
        else
          if (n == "y") then 
            this1.y = value;
          else
            if (n == "z") then 
              this1.z = value;
            else
              _G.error(__haxe_Exception.thrown("Invalid index"),0);
            end;
          end;
        end;
      end;
    end;
  end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__bolt_godot__Vector3i_Vector3i_Impl_.toString = function(v) 
  do return v.toString() end;
end

__bolt_godot__Vector4_Vector4_Impl_.new = {}
__bolt_godot__Vector4_Vector4_Impl_.__name__ = "bolt.godot._Vector4.Vector4_Impl_"
__bolt_godot__Vector4_Vector4_Impl_._new = function(x,y,z,w) 
  if (w == nil) then 
    w = 0;
  end;
  if (z == nil) then 
    z = 0;
  end;
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return godot.Vector4.__new(x, y, z, w) end;
end
__bolt_godot__Vector4_Vector4_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    if (name == "native") then 
      do return this1 end;
    else
      if (name == "x") then 
        do return this1.x end;
      else
        if (name == "y") then 
          do return this1.y end;
        else
          if (name == "z") then 
            do return this1.z end;
          else
            if (name == "w") then 
              do return this1.w end;
            else
              local o = this1;
              if ((function() 
                local _hx_1
                if ((_G.type(o) == "function") and not ((function() 
                  local _hx_2
                  if (_G.type(o) ~= "table") then 
                  _hx_2 = false; else 
                  _hx_2 = o.__name__; end
                  return _hx_2
                end )() or (function() 
                  local _hx_3
                  if (_G.type(o) ~= "table") then 
                  _hx_3 = false; else 
                  _hx_3 = o.__ename__; end
                  return _hx_3
                end )())) then 
                _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
                _hx_1 = true; elseif (o.__fields__ ~= nil) then 
                _hx_1 = o.__fields__[name] ~= nil; else 
                _hx_1 = o[name] ~= nil; end
                return _hx_1
              end )()) then 
                do return Reflect.field(this1, name) end;
              else
                _G.error(__haxe_Exception.thrown("Invalid field"),0);
              end;
            end;
          end;
        end;
      end;
    end;
  end;
end
__bolt_godot__Vector4_Vector4_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__bolt_godot__Vector4_Vector4_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == 3) then 
    do return this1.w end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  if (n == "w") then 
    do return this1.w end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__bolt_godot__Vector4_Vector4_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == 3) then 
          this1.w = value;
        else
          if (n == "x") then 
            this1.x = value;
          else
            if (n == "y") then 
              this1.y = value;
            else
              if (n == "z") then 
                this1.z = value;
              else
                if (n == "w") then 
                  this1.w = value;
                else
                  _G.error(__haxe_Exception.thrown("Invalid index"),0);
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
end
__bolt_godot__Vector4_Vector4_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__bolt_godot__Vector4_Vector4_Impl_.toString = function(v) 
  do return v.toString() end;
end

__bolt_godot__Vector4i_Vector4i_Impl_.new = {}
__bolt_godot__Vector4i_Vector4i_Impl_.__name__ = "bolt.godot._Vector4i.Vector4i_Impl_"
__bolt_godot__Vector4i_Vector4i_Impl_._new = function(x,y,z,w) 
  if (w == nil) then 
    w = 0;
  end;
  if (z == nil) then 
    z = 0;
  end;
  if (y == nil) then 
    y = 0;
  end;
  if (x == nil) then 
    x = 0;
  end;
  do return godot.Vector4I.__new(x, y, z, w) end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.fieldRead = function(this1,name) 
  if (name == "toString") then 
    do return function() 
      local v = this1;
      do return v.toString() end;
    end end;
  else
    if (name == "native") then 
      do return this1 end;
    else
      if (name == "x") then 
        do return this1.x end;
      else
        if (name == "y") then 
          do return this1.y end;
        else
          if (name == "z") then 
            do return this1.z end;
          else
            if (name == "w") then 
              do return this1.w end;
            else
              local o = this1;
              if ((function() 
                local _hx_1
                if ((_G.type(o) == "function") and not ((function() 
                  local _hx_2
                  if (_G.type(o) ~= "table") then 
                  _hx_2 = false; else 
                  _hx_2 = o.__name__; end
                  return _hx_2
                end )() or (function() 
                  local _hx_3
                  if (_G.type(o) ~= "table") then 
                  _hx_3 = false; else 
                  _hx_3 = o.__ename__; end
                  return _hx_3
                end )())) then 
                _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
                _hx_1 = true; elseif (o.__fields__ ~= nil) then 
                _hx_1 = o.__fields__[name] ~= nil; else 
                _hx_1 = o[name] ~= nil; end
                return _hx_1
              end )()) then 
                do return Reflect.field(this1, name) end;
              else
                _G.error(__haxe_Exception.thrown("Invalid field"),0);
              end;
            end;
          end;
        end;
      end;
    end;
  end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.fieldWrite = function(this1,name,value) 
  local o = this1;
  if ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[name] ~= nil) or (name == "length"))) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__[name] ~= nil; else 
    _hx_1 = o[name] ~= nil; end
    return _hx_1
  end )()) then 
    this1[name] = value;
  else
    _G.error(__haxe_Exception.thrown("Invalid field"),0);
  end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.arrayRead = function(this1,n) 
  if (n == 0) then 
    do return this1.x end;
  end;
  if (n == 1) then 
    do return this1.y end;
  end;
  if (n == 2) then 
    do return this1.z end;
  end;
  if (n == 3) then 
    do return this1.w end;
  end;
  if (n == "x") then 
    do return this1.x end;
  end;
  if (n == "y") then 
    do return this1.y end;
  end;
  if (n == "z") then 
    do return this1.z end;
  end;
  if (n == "w") then 
    do return this1.w end;
  end;
  _G.error(__haxe_Exception.thrown("Invalid index"),0);
end
__bolt_godot__Vector4i_Vector4i_Impl_.arrayWrite = function(this1,n,value) 
  if (n == 0) then 
    this1.x = value;
  else
    if (n == 1) then 
      this1.y = value;
    else
      if (n == 2) then 
        this1.z = value;
      else
        if (n == 3) then 
          this1.w = value;
        else
          if (n == "x") then 
            this1.x = value;
          else
            if (n == "y") then 
              this1.y = value;
            else
              if (n == "z") then 
                this1.z = value;
              else
                if (n == "w") then 
                  this1.w = value;
                else
                  _G.error(__haxe_Exception.thrown("Invalid index"),0);
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.add = function(this1,rhs) 
  local lhs = this1;
  do return lhs + rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.sub = function(this1,rhs) 
  local lhs = this1;
  do return lhs - rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.mul = function(this1,rhs) 
  local lhs = this1;
  do return lhs * rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.div = function(this1,rhs) 
  local lhs = this1;
  do return lhs / rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.mod = function(this1,rhs) 
  local lhs = this1;
  do return lhs % rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.eq = function(this1,rhs) 
  local lhs = this1;
  do return lhs == rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.neq = function(this1,rhs) 
  local lhs = this1;
  do return lhs ~= rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.lt = function(this1,rhs) 
  local lhs = this1;
  do return lhs < rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.lte = function(this1,rhs) 
  local lhs = this1;
  do return lhs <= rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.gt = function(this1,rhs) 
  local lhs = this1;
  do return lhs > rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.gte = function(this1,rhs) 
  local lhs = this1;
  do return lhs >= rhs end;
end
__bolt_godot__Vector4i_Vector4i_Impl_.toString = function(v) 
  do return v.toString() end;
end

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = "haxe.Exception"
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_Log.new = {}
__haxe_Log.__name__ = "haxe.Log"
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do _hx_do_first_1 = false;
      
      local v = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace"
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    do return String.prototype.split(s, "\n"):slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = "haxe.ValueException"
__haxe_ValueException.prototype = _hx_e();

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
end
__haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException"
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(__haxe_Exception.prototype.toString(self))) .. Std.string(" in ")) .. Std.string(self.posInfos.className)) .. Std.string(".")) .. Std.string(self.posInfos.methodName)) .. Std.string(" at ")) .. Std.string(self.posInfos.fileName)) .. Std.string(":")) .. Std.string(self.posInfos.lineNumber) end
end

__haxe_exceptions_PosException.prototype.__class__ =  __haxe_exceptions_PosException
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
end
__haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException"
__haxe_exceptions_NotImplementedException.prototype = _hx_e();

__haxe_exceptions_NotImplementedException.prototype.__class__ =  __haxe_exceptions_NotImplementedException
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator"
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator"
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__lua_Boot.new = {}
__lua_Boot.__name__ = "lua.Boot"
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do _hx_do_first_1 = false;
          
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = "lua.UserData"

__lua_Thread.new = {}
__lua_Thread.__name__ = "lua.Thread"
if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = "String";
  Array.__name__ = "Array";
end

_hx_print = print or (function() end)

_hx_apply_self = function(self, f, ...)
  return self[f](self,...)
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

function _hx_handle_error(obj)
  local message = tostring(obj)
  if _G.debug and _G.debug.traceback then
    -- level 2 to skip _hx_handle_error
    message = _G.debug.traceback(message, 2)
  end
  return setmetatable({}, { __tostring = function() return message end })
end

_hx_static_init();
local success, err = _G.xpcall(function() 
  Main.main();
  _hx_luv.run();
end, _hx_handle_error)
if not success then _G.error(err) end
